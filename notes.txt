

#create sveltekit directory from desktop
npm init svelte <directory name>

cd <directory name>
npm install
git init && git add -A && git commit -m "Initial commit"
npm run dev -- --open

# can clean up the default stuff to start out with a clean slate
# deleted everything except app.css , app.html , and routes folder
# created components folder
# added back in an empty __layout.svelte

# this seems like a good starting point?
# can create a remote git repo and link at this point if wanted.

index.svelte created as the main route for the app '/'


# getting started with firebase & firestore
npm install firebase

# create a env.js that can be excluded from git
# put the firebase config in this. -> export default {..your config object}

# create initFirebase.js file, exports an async function that attempts firebase connections
# once we get this done for first project, should be pretty boilerplate

# call the initFirebase function out of the __layout , modified for loading within a function only on client
# returns app and db objects for return into the layout.. layout then adds them into the global context,
# so that we can pull the db object wherever necessary..

# ^^^ this may not be ideal, but it is working well for now.


# New notes as of the sveltekit routing update
# you want to call all your load functions in a .js file, that then passes the information to your .svelte file
# In my use case, the site connects to firebase right away. For analytics and establishing the information for the
# form submission. This would be done at initial load and then the data available to every page/route that has
# the form. Or just all of them since it's not a big deal.


